// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Faculty {
  faculty_id   Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  department   String
  passwordHash String

  teaches      Teaches[]
  questions    Question[] 
}

model Student {
  student_id   String       @id
  name         String
  email        String    @unique
  dob          String
  passwordHash String

  batch_id Int
  batch    Batch @relation(fields: [batch_id], references: [batch_id])

  takes       Takes[]
  allocations AssignmentAllocation[]
}

model Batch {
  batch_id    Int      @id @default(autoincrement())
  batch_name  String   // A1, B1, etc.
  semester    Int
  year        Int
  department  String

  students Student[]
  teaches  Teaches[]

  @@unique([batch_name, semester, year, department])
}

model Course {
  subject_code String  @id   // CE356, MA201, etc.
  title        String
  department   String

  teaches     Teaches[]
  takes       Takes[]
  questions   Question[]
  assignments Assignment[]
}

model Teaches {
  teaches_id   Int @id @default(autoincrement())
  faculty_id   Int
  subject_code String
  batch_id     Int

  faculty Faculty @relation(fields: [faculty_id], references: [faculty_id])
  course  Course  @relation(fields: [subject_code], references: [subject_code])
  batch   Batch   @relation(fields: [batch_id], references: [batch_id])
}

model Takes {
  takes_id     Int @id @default(autoincrement())
  student_id   String
  subject_code String

  student Student @relation(fields: [student_id], references: [student_id])
  course  Course  @relation(fields: [subject_code], references: [subject_code])
}

model Question {
  question_id  Int      @id @default(autoincrement())
  text         String
  source       SourceType?
  topic        String?

  subject_code String
  created_by   Int

  course  Course  @relation(fields: [subject_code], references: [subject_code])
  faculty Faculty @relation(fields: [created_by], references: [faculty_id])

  assignments AssignmentQuestion[]
}

model Assignment {
  assignment_id Int      @id @default(autoincrement())
  title         String
  created_on    DateTime @default(now())

  subject_code String

  course  Course  @relation(fields: [subject_code], references: [subject_code])

  questions   AssignmentQuestion[]
  allocations AssignmentAllocation[]
}

model AssignmentQuestion {
  id            Int @id @default(autoincrement())
  assignment_id Int
  question_id   Int

  assignment Assignment @relation(fields: [assignment_id], references: [assignment_id])
  question   Question   @relation(fields: [question_id], references: [question_id])
}

model AssignmentAllocation {
  allocation_id Int @id @default(autoincrement())
  student_id    String
  assignment_id Int
  status        String   // "assigned", "submitted"
  file_path     String?
  submitted_on  DateTime?

  student    Student    @relation(fields: [student_id], references: [student_id])
  assignment Assignment @relation(fields: [assignment_id], references: [assignment_id])
}

enum SourceType {
  TOPIC
  PDF
}